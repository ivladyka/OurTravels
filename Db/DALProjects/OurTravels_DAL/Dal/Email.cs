
/*
'===============================================================================
'  Generated From - CSharp_dOOdads_BusinessEntity.vbgen
' 
'  ** IMPORTANT  ** 
'  How to Generate your stored procedures:
' 
'  SQL        = SQL_StoredProcs.vbgen
'  ACCESS     = Access_StoredProcs.vbgen
'  ORACLE     = Oracle_StoredProcs.vbgen
'  FIREBIRD   = FirebirdStoredProcs.vbgen
'  POSTGRESQL = PostgreSQL_StoredProcs.vbgen
'
'  The supporting base class SqlClientEntity is in the Architecture directory in "dOOdads".
'  
'  This object is 'abstract' which means you need to inherit from it to be able
'  to instantiate it.  This is very easilly done. You can override properties and
'  methods in your derived class, this allows you to regenerate this class at any
'  time and not worry about overwriting custom code. 
'
'  NEVER EDIT THIS FILE.
'
'  public class YourObject :  _YourObject
'  {
'
'  }
'
'===============================================================================
*/

// Generated by MyGeneration Version # (1.3.0.3)

using System;
using System.Data;
using System.Data.SqlClient;
using System.Collections;
using System.Collections.Specialized;

using MyGeneration.dOOdads;
namespace VikkiSoft_BLL.DAL
{
    public abstract class _Email : SqlClientEntity
    {
        public _Email()
		{
			this.QuerySource = "Email";
			this.MappingName = "Email";

		}	

		//=================================================================
		//  public Overrides void AddNew()
		//=================================================================
		//
		//=================================================================
		public override void AddNew()
		{
			base.AddNew();
			
		}
		
		
		public override void FlushData()
		{
			this._whereClause = null;
			this._aggregateClause = null;
			base.FlushData();
		}
		
		//=================================================================
		//  	public Function LoadAll() As Boolean
		//=================================================================
		//  Loads all of the records in the database, and sets the currentRow to the first row
		//=================================================================
		public bool LoadAll() 
		{
			ListDictionary parameters = null;
			
			return base.LoadFromSql("[" + this.SchemaStoredProcedure + "LoadAllEmail]", parameters);
		}
	
		//=================================================================
		// public Overridable Function LoadByPrimaryKey()  As Boolean
		//=================================================================
		//  Loads a single row of via the primary key
		//=================================================================
		public virtual bool LoadByPrimaryKey(int EmailID)
		{
			ListDictionary parameters = new ListDictionary();
			parameters.Add(Parameters.EmailID, EmailID);

		
			return base.LoadFromSql("[" + this.SchemaStoredProcedure + "LoadEmailByPrimaryKey]", parameters);
		}
		
		#region Parameters
		protected class Parameters
		{
			
			public static SqlParameter EmailID
			{
				get
				{
					return new SqlParameter("@EmailID", SqlDbType.Int, 0);
				}
			}

            public static SqlParameter EmailAddress
			{
				get
				{
                    return new SqlParameter("@EmailAddress", SqlDbType.VarChar, 255);
				}
			}

            public static SqlParameter AddedDate
            {
                get
                {
                    return new SqlParameter("@AddedDate", SqlDbType.SmallDateTime, 0);
                }
            }

            public static SqlParameter EmailTypeID
            {
                get
                {
                    return new SqlParameter("@EmailTypeID", SqlDbType.Int, 0);
                }
            }

            public static SqlParameter Sent
            {
                get
                {
                    return new SqlParameter("@Sent", SqlDbType.Bit, 0);
                }
            }

		}
		#endregion		
	
		#region ColumnNames
		public class ColumnNames
		{  
            public const string EmailID = "EmailID";
            public const string EmailAddress = "EmailAddress";
            public const string AddedDate = "AddedDate";
            public const string EmailTypeID = "EmailTypeID";
            public const string Sent = "Sent";

			static public string ToPropertyName(string columnName)
			{
				if(ht == null)
				{
					ht = new Hashtable();
					
					ht[EmailID] = _Email.PropertyNames.EmailID;
                    ht[EmailAddress] = _Email.PropertyNames.EmailAddress;
                    ht[AddedDate] = _Email.PropertyNames.AddedDate;
                    ht[EmailTypeID] = _Email.PropertyNames.EmailTypeID;
                    ht[Sent] = _Email.PropertyNames.Sent;

				}
				return (string)ht[columnName];
			}

			static private Hashtable ht = null;			 
		}
		#endregion
		
		#region PropertyNames
		public class PropertyNames
		{  
            public const string EmailID = "EmailID";
            public const string EmailAddress = "EmailAddress";
            public const string AddedDate = "AddedDate";
            public const string EmailTypeID = "EmailTypeID";
            public const string Sent = "Sent";

			static public string ToColumnName(string propertyName)
			{
				if(ht == null)
				{
					ht = new Hashtable();
					
					ht[EmailID] = _Email.ColumnNames.EmailID;
                    ht[EmailAddress] = _Email.ColumnNames.EmailAddress;
                    ht[AddedDate] = _Email.ColumnNames.AddedDate;
                    ht[EmailTypeID] = _Email.ColumnNames.EmailTypeID;
                    ht[Sent] = _Email.ColumnNames.Sent;

				}
				return (string)ht[propertyName];
			}

			static private Hashtable ht = null;			 
		}			 
		#endregion	

		#region StringPropertyNames
		public class StringPropertyNames
		{  
            public const string EmailID = "s_EmailID";
            public const string EmailAddress = "s_EmailAddress";
            public const string AddedDate = "s_AddedDate";
            public const string EmailTypeID = "s_EmailTypeID";
            public const string Sent = "s_Sent";
		}
		#endregion		
		
		#region Properties
	
		public virtual int EmailID
	    {
			get
	        {
				return base.Getint(ColumnNames.EmailID);
			}
			set
	        {
				base.Setint(ColumnNames.EmailID, value);
			}
		}

        public virtual string EmailAddress
	    {
			get
	        {
                return base.Getstring(ColumnNames.EmailAddress);
			}
			set
	        {
                base.Setstring(ColumnNames.EmailAddress, value);
			}
		}

        public virtual DateTime AddedDate
        {
            get
            {
                return base.GetDateTime(ColumnNames.AddedDate);
            }
            set
            {
                base.SetDateTime(ColumnNames.AddedDate, value);
            }
        }

        public virtual int EmailTypeID
        {
            get
            {
                return base.Getint(ColumnNames.EmailTypeID);
            }
            set
            {
                base.Setint(ColumnNames.EmailTypeID, value);
            }
        }

        public virtual bool Sent
        {
            get
            {
                return base.Getbool(ColumnNames.Sent);
            }
            set
            {
                base.Setbool(ColumnNames.Sent, value);
            }
        }


		#endregion
		
		#region String Properties
	
		public virtual string s_EmailID
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.EmailID) ? string.Empty : base.GetintAsString(ColumnNames.EmailID);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.EmailID);
				else
					this.EmailID = base.SetintAsString(ColumnNames.EmailID, value);
			}
		}

        public virtual string s_EmailAddress
	    {
			get
	        {
                return this.IsColumnNull(ColumnNames.EmailAddress) ? string.Empty : base.GetstringAsString(ColumnNames.EmailAddress);
			}
			set
	        {
				if(string.Empty == value)
                    this.SetColumnNull(ColumnNames.EmailAddress);
				else
                    this.EmailAddress = base.SetstringAsString(ColumnNames.EmailAddress, value);
			}
		}

        public virtual string s_AddedDate
        {
            get
            {
                return this.IsColumnNull(ColumnNames.AddedDate) ? string.Empty : base.GetDateTimeAsString(ColumnNames.AddedDate);
            }
            set
            {
                if (string.Empty == value)
                    this.SetColumnNull(ColumnNames.AddedDate);
                else
                    this.AddedDate = base.SetDateTimeAsString(ColumnNames.AddedDate, value);
            }
        }

        public virtual string s_EmailTypeID
        {
            get
            {
                return this.IsColumnNull(ColumnNames.EmailTypeID) ? string.Empty : base.GetintAsString(ColumnNames.EmailTypeID);
            }
            set
            {
                if (string.Empty == value)
                    this.SetColumnNull(ColumnNames.EmailTypeID);
                else
                    this.EmailTypeID = base.SetintAsString(ColumnNames.EmailTypeID, value);
            }
        }

        public virtual string s_Sent
        {
            get
            {
                return this.IsColumnNull(ColumnNames.Sent) ? string.Empty : base.GetboolAsString(ColumnNames.Sent);
            }
            set
            {
                if (string.Empty == value)
                    this.SetColumnNull(ColumnNames.Sent);
                else
                    this.Sent = base.SetboolAsString(ColumnNames.Sent, value);
            }
        }


		#endregion		
	
		#region Where Clause
		public class WhereClause
		{
			public WhereClause(BusinessEntity entity)
			{
				this._entity = entity;
			}
			
			public TearOffWhereParameter TearOff
			{
				get
				{
					if(_tearOff == null)
					{
						_tearOff = new TearOffWhereParameter(this);
					}

					return _tearOff;
				}
			}

			#region WhereParameter TearOff's
			public class TearOffWhereParameter
			{
				public TearOffWhereParameter(WhereClause clause)
				{
					this._clause = clause;
				}
				
				
				public WhereParameter EmailID
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.EmailID, Parameters.EmailID);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

                public WhereParameter EmailAddress
				{
					get
					{
                        WhereParameter where = new WhereParameter(ColumnNames.EmailAddress, Parameters.EmailAddress);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

                public WhereParameter AddedDate
                {
                    get
                    {
                        WhereParameter where = new WhereParameter(ColumnNames.AddedDate, Parameters.AddedDate);
                        this._clause._entity.Query.AddWhereParameter(where);
                        return where;
                    }
                }

                public WhereParameter EmailTypeID
                {
                    get
                    {
                        WhereParameter where = new WhereParameter(ColumnNames.EmailTypeID, Parameters.EmailTypeID);
                        this._clause._entity.Query.AddWhereParameter(where);
                        return where;
                    }
                }

                public WhereParameter Sent
                {
                    get
                    {
                        WhereParameter where = new WhereParameter(ColumnNames.Sent, Parameters.Sent);
                        this._clause._entity.Query.AddWhereParameter(where);
                        return where;
                    }
                }

				private WhereClause _clause;
			}
			#endregion
		
			public WhereParameter EmailID
		    {
				get
		        {
					if(_EmailID_W == null)
	        	    {
						_EmailID_W = TearOff.EmailID;
					}
					return _EmailID_W;
				}
			}

            public WhereParameter EmailAddress
		    {
				get
		        {
                    if (_EmailAddress_W == null)
	        	    {
                        _EmailAddress_W = TearOff.EmailAddress;
					}
                    return _EmailAddress_W;
				}
			}

            public WhereParameter AddedDate
            {
                get
                {
                    if (_AddedDate_W == null)
                    {
                        _AddedDate_W = TearOff.AddedDate;
                    }
                    return _AddedDate_W;
                }
            }

            public WhereParameter EmailTypeID
            {
                get
                {
                    if (_EmailTypeID_W == null)
                    {
                        _EmailTypeID_W = TearOff.EmailTypeID;
                    }
                    return _EmailTypeID_W;
                }
            }

            public WhereParameter Sent
            {
                get
                {
                    if (_Sent_W == null)
                    {
                        _Sent_W = TearOff.Sent;
                    }
                    return _Sent_W;
                }
            }

			private WhereParameter _EmailID_W = null;
            private WhereParameter _EmailAddress_W = null;
            private WhereParameter _AddedDate_W = null;
            private WhereParameter _EmailTypeID_W = null;
            private WhereParameter _Sent_W = null;

			public void WhereClauseReset()
			{
				_EmailID_W = null;
                _EmailAddress_W = null;
                _AddedDate_W = null;
                _EmailTypeID_W = null;
                _Sent_W = null;

				this._entity.Query.FlushWhereParameters();

			}
	
			private BusinessEntity _entity;
			private TearOffWhereParameter _tearOff;
			
		}
	
		public WhereClause Where
		{
			get
			{
				if(_whereClause == null)
				{
					_whereClause = new WhereClause(this);
				}
		
				return _whereClause;
			}
		}
		
		private WhereClause _whereClause = null;	
		#endregion
	
		#region Aggregate Clause
		public class AggregateClause
		{
			public AggregateClause(BusinessEntity entity)
			{
				this._entity = entity;
			}
			
			public TearOffAggregateParameter TearOff
			{
				get
				{
					if(_tearOff == null)
					{
						_tearOff = new TearOffAggregateParameter(this);
					}

					return _tearOff;
				}
			}

			#region AggregateParameter TearOff's
			public class TearOffAggregateParameter
			{
				public TearOffAggregateParameter(AggregateClause clause)
				{
					this._clause = clause;
				}
				
				
				public AggregateParameter EmailID
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.EmailID, Parameters.EmailID);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

                public AggregateParameter EmailAddress
				{
					get
					{
                        AggregateParameter aggregate = new AggregateParameter(ColumnNames.EmailAddress, Parameters.EmailAddress);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

                public AggregateParameter AddedDate
                {
                    get
                    {
                        AggregateParameter aggregate = new AggregateParameter(ColumnNames.AddedDate, Parameters.AddedDate);
                        this._clause._entity.Query.AddAggregateParameter(aggregate);
                        return aggregate;
                    }
                }

                public AggregateParameter EmailTypeID
                {
                    get
                    {
                        AggregateParameter aggregate = new AggregateParameter(ColumnNames.EmailTypeID, Parameters.EmailTypeID);
                        this._clause._entity.Query.AddAggregateParameter(aggregate);
                        return aggregate;
                    }
                }

                public AggregateParameter Sent
                {
                    get
                    {
                        AggregateParameter aggregate = new AggregateParameter(ColumnNames.Sent, Parameters.Sent);
                        this._clause._entity.Query.AddAggregateParameter(aggregate);
                        return aggregate;
                    }
                }

				private AggregateClause _clause;
			}
			#endregion
		
			public AggregateParameter EmailID
		    {
				get
		        {
					if(_EmailID_W == null)
	        	    {
						_EmailID_W = TearOff.EmailID;
					}
					return _EmailID_W;
				}
			}

            public AggregateParameter EmailAddress
		    {
				get
		        {
                    if (_EmailAddress_W == null)
	        	    {
                        _EmailAddress_W = TearOff.EmailAddress;
					}
                    return _EmailAddress_W;
				}
			}

            public AggregateParameter AddedDate
            {
                get
                {
                    if (_AddedDate_W == null)
                    {
                        _AddedDate_W = TearOff.AddedDate;
                    }
                    return _AddedDate_W;
                }
            }

            public AggregateParameter EmailTypeID
            {
                get
                {
                    if (_EmailTypeID_W == null)
                    {
                        _EmailTypeID_W = TearOff.EmailTypeID;
                    }
                    return _EmailTypeID_W;
                }
            }

            public AggregateParameter Sent
            {
                get
                {
                    if (_Sent_W == null)
                    {
                        _Sent_W = TearOff.Sent;
                    }
                    return _Sent_W;
                }
            }

			private AggregateParameter _EmailID_W = null;
            private AggregateParameter _EmailAddress_W = null;
            private AggregateParameter _AddedDate_W = null;
            private AggregateParameter _EmailTypeID_W = null;
            private AggregateParameter _Sent_W = null;

			public void AggregateClauseReset()
			{
				_EmailID_W = null;
                _EmailAddress_W = null;
                _AddedDate_W = null;
                _EmailTypeID_W = null;
                _Sent_W = null;

				this._entity.Query.FlushAggregateParameters();

			}
	
			private BusinessEntity _entity;
			private TearOffAggregateParameter _tearOff;
			
		}
	
		public AggregateClause Aggregate
		{
			get
			{
				if(_aggregateClause == null)
				{
					_aggregateClause = new AggregateClause(this);
				}
		
				return _aggregateClause;
			}
		}
		
		private AggregateClause _aggregateClause = null;	
		#endregion
	
		protected override IDbCommand GetInsertCommand() 
		{
		
			SqlCommand cmd = new SqlCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			cmd.CommandText = "[" + this.SchemaStoredProcedure + "InsertEmail]";
	
			CreateParameters(cmd);
			    
			return cmd;
		}
	
		protected override IDbCommand GetUpdateCommand()
		{
		
			SqlCommand cmd = new SqlCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			cmd.CommandText = "[" + this.SchemaStoredProcedure + "UpdateEmail]";
	
			CreateParameters(cmd);
			      
			return cmd;
		}
	
		protected override IDbCommand GetDeleteCommand()
		{
		
			SqlCommand cmd = new SqlCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			cmd.CommandText = "[" + this.SchemaStoredProcedure + "DeleteEmail]";
	
			SqlParameter p;
			p = cmd.Parameters.Add(Parameters.EmailID);
			p.SourceColumn = ColumnNames.EmailID;
			p.SourceVersion = DataRowVersion.Current;

  
			return cmd;
		}
		
		private IDbCommand CreateParameters(SqlCommand cmd)
		{
			SqlParameter p;
		
			p = cmd.Parameters.Add(Parameters.EmailID);
			p.SourceColumn = ColumnNames.EmailID;
			p.SourceVersion = DataRowVersion.Current;

            p = cmd.Parameters.Add(Parameters.EmailAddress);
            p.SourceColumn = ColumnNames.EmailAddress;
			p.SourceVersion = DataRowVersion.Current;

            p = cmd.Parameters.Add(Parameters.AddedDate);
            p.SourceColumn = ColumnNames.AddedDate;
            p.SourceVersion = DataRowVersion.Current;

            p = cmd.Parameters.Add(Parameters.EmailTypeID);
            p.SourceColumn = ColumnNames.EmailTypeID;
            p.SourceVersion = DataRowVersion.Current;

            p = cmd.Parameters.Add(Parameters.Sent);
            p.SourceColumn = ColumnNames.Sent;
            p.SourceVersion = DataRowVersion.Current;

			return cmd;
		}
    }
}
