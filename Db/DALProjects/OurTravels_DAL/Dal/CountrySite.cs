
/*
'===============================================================================
'  Generated From - CSharp_dOOdads_BusinessEntity.vbgen
' 
'  ** IMPORTANT  ** 
'  How to Generate your stored procedures:
' 
'  SQL        = SQL_StoredProcs.vbgen
'  ACCESS     = Access_StoredProcs.vbgen
'  ORACLE     = Oracle_StoredProcs.vbgen
'  FIREBIRD   = FirebirdStoredProcs.vbgen
'  POSTGRESQL = PostgreSQL_StoredProcs.vbgen
'
'  The supporting base class SqlClientEntity is in the Architecture directory in "dOOdads".
'  
'  This object is 'abstract' which means you need to inherit from it to be able
'  to instantiate it.  This is very easilly done. You can override properties and
'  methods in your derived class, this allows you to regenerate this class at any
'  time and not worry about overwriting custom code. 
'
'  NEVER EDIT THIS FILE.
'
'  public class YourObject :  _YourObject
'  {
'
'  }
'
'===============================================================================
*/

// Generated by MyGeneration Version # (1.3.0.3)

using System;
using System.Data;
using System.Data.SqlClient;
using System.Collections;
using System.Collections.Specialized;

using MyGeneration.dOOdads;

namespace VikkiSoft_BLL.DAL
{
    public abstract class _CountrySite : SqlClientEntity
    {
        public _CountrySite()
        {
            this.QuerySource = "CountrySite";
            this.MappingName = "CountrySite";

        }

        //=================================================================
        //  public Overrides void AddNew()
        //=================================================================
        //
        //=================================================================
        public override void AddNew()
        {
            base.AddNew();

        }


        public override void FlushData()
        {
            this._whereClause = null;
            this._aggregateClause = null;
            base.FlushData();
        }

        //=================================================================
        //  	public Function LoadAll() As Boolean
        //=================================================================
        //  Loads all of the records in the database, and sets the currentRow to the first row
        //=================================================================
        public bool LoadAll()
        {
            ListDictionary parameters = null;

            return base.LoadFromSql("[" + this.SchemaStoredProcedure + "LoadAllCountrySite]", parameters);
        }

        //=================================================================
        // public Overridable Function LoadByPrimaryKey()  As Boolean
        //=================================================================
        //  Loads a single row of via the primary key
        //=================================================================
        public virtual bool LoadByPrimaryKey(int CountrySiteID)
        {
            ListDictionary parameters = new ListDictionary();
            parameters.Add(Parameters.CountrySiteID, CountrySiteID);


            return base.LoadFromSql("[" + this.SchemaStoredProcedure + "LoadCountrySiteByPrimaryKey]", parameters);
        }

        #region Parameters
        protected class Parameters
        {

            public static SqlParameter CountrySiteID
            {
                get
                {
                    return new SqlParameter("@CountrySiteID", SqlDbType.Int, 0);
                }
            }

            public static SqlParameter CountryID
            {
                get
                {
                    return new SqlParameter("@CountryID", SqlDbType.Int, 0);
                }
            }

            public static SqlParameter SiteID
            {
                get
                {
                    return new SqlParameter("@SiteID", SqlDbType.Int, 0);
                }
            }
        }
        #endregion

        #region ColumnNames
        public class ColumnNames
        {
            public const string CountrySiteID = "CountrySiteID";
            public const string CountryID = "CountryID";
            public const string SiteID = "SiteID";

            static public string ToPropertyName(string columnName)
            {
                if (ht == null)
                {
                    ht = new Hashtable();

                    ht[CountrySiteID] = _CountrySite.PropertyNames.CountrySiteID;
                    ht[CountryID] = _CountrySite.PropertyNames.CountryID;
                    ht[SiteID] = _CountrySite.PropertyNames.SiteID;

                }
                return (string)ht[columnName];
            }

            static private Hashtable ht = null;
        }
        #endregion

        #region PropertyNames
        public class PropertyNames
        {
            public const string CountrySiteID = "CountrySiteID";
            public const string CountryID = "CountryID";
            public const string SiteID = "SiteID";

            static public string ToColumnName(string propertyName)
            {
                if (ht == null)
                {
                    ht = new Hashtable();

                    ht[CountrySiteID] = _CountrySite.ColumnNames.CountrySiteID;
                    ht[CountryID] = _CountrySite.ColumnNames.CountryID;
                    ht[SiteID] = _CountrySite.ColumnNames.SiteID;

                }
                return (string)ht[propertyName];
            }

            static private Hashtable ht = null;
        }
        #endregion

        #region StringPropertyNames
        public class StringPropertyNames
        {
            public const string CountrySiteID = "s_CountrySiteID";
            public const string CountryID = "s_CountryID";
            public const string SiteID = "s_SiteID";

        }
        #endregion

        #region Properties

        public virtual int CountrySiteID
        {
            get
            {
                return base.Getint(ColumnNames.CountrySiteID);
            }
            set
            {
                base.Setint(ColumnNames.CountrySiteID, value);
            }
        }

        public virtual int CountryID
        {
            get
            {
                return base.Getint(ColumnNames.CountryID);
            }
            set
            {
                base.Setint(ColumnNames.CountryID, value);
            }
        }

        public virtual int SiteID
        {
            get
            {
                return base.Getint(ColumnNames.SiteID);
            }
            set
            {
                base.Setint(ColumnNames.SiteID, value);
            }
        }

        #endregion

        #region String Properties

        public virtual string s_CountrySiteID
        {
            get
            {
                return this.IsColumnNull(ColumnNames.CountrySiteID) ? string.Empty : base.GetintAsString(ColumnNames.CountrySiteID);
            }
            set
            {
                if (string.Empty == value)
                    this.SetColumnNull(ColumnNames.CountrySiteID);
                else
                    this.CountrySiteID = base.SetintAsString(ColumnNames.CountrySiteID, value);
            }
        }

        public virtual string s_CountryID
        {
            get
            {
                return this.IsColumnNull(ColumnNames.CountryID) ? string.Empty : base.GetintAsString(ColumnNames.CountryID);
            }
            set
            {
                if (string.Empty == value)
                    this.SetColumnNull(ColumnNames.CountryID);
                else
                    this.CountryID = base.SetintAsString(ColumnNames.CountryID, value);
            }
        }

        public virtual string s_SiteID
        {
            get
            {
                return this.IsColumnNull(ColumnNames.SiteID) ? string.Empty : base.GetintAsString(ColumnNames.SiteID);
            }
            set
            {
                if (string.Empty == value)
                    this.SetColumnNull(ColumnNames.SiteID);
                else
                    this.SiteID = base.SetintAsString(ColumnNames.SiteID, value);
            }
        }

        #endregion

        #region Where Clause
        public class WhereClause
        {
            public WhereClause(BusinessEntity entity)
            {
                this._entity = entity;
            }

            public TearOffWhereParameter TearOff
            {
                get
                {
                    if (_tearOff == null)
                    {
                        _tearOff = new TearOffWhereParameter(this);
                    }

                    return _tearOff;
                }
            }

            #region WhereParameter TearOff's
            public class TearOffWhereParameter
            {
                public TearOffWhereParameter(WhereClause clause)
                {
                    this._clause = clause;
                }


                public WhereParameter CountrySiteID
                {
                    get
                    {
                        WhereParameter where = new WhereParameter(ColumnNames.CountrySiteID, Parameters.CountrySiteID);
                        this._clause._entity.Query.AddWhereParameter(where);
                        return where;
                    }
                }

                public WhereParameter CountryID
                {
                    get
                    {
                        WhereParameter where = new WhereParameter(ColumnNames.CountryID, Parameters.CountryID);
                        this._clause._entity.Query.AddWhereParameter(where);
                        return where;
                    }
                }

                public WhereParameter SiteID
                {
                    get
                    {
                        WhereParameter where = new WhereParameter(ColumnNames.SiteID, Parameters.SiteID);
                        this._clause._entity.Query.AddWhereParameter(where);
                        return where;
                    }
                }

                private WhereClause _clause;
            }
            #endregion

            public WhereParameter CountrySiteID
            {
                get
                {
                    if (_CountrySiteID_W == null)
                    {
                        _CountrySiteID_W = TearOff.CountrySiteID;
                    }
                    return _CountrySiteID_W;
                }
            }

            public WhereParameter CountryID
            {
                get
                {
                    if (_CountryID_W == null)
                    {
                        _CountryID_W = TearOff.CountryID;
                    }
                    return _CountryID_W;
                }
            }

            public WhereParameter SiteID
            {
                get
                {
                    if (_SiteID_W == null)
                    {
                        _SiteID_W = TearOff.SiteID;
                    }
                    return _SiteID_W;
                }
            }

            private WhereParameter _CountrySiteID_W = null;
            private WhereParameter _CountryID_W = null;
            private WhereParameter _SiteID_W = null;

            public void WhereClauseReset()
            {
                _CountrySiteID_W = null;
                _CountryID_W = null;
                _SiteID_W = null;

                this._entity.Query.FlushWhereParameters();

            }

            private BusinessEntity _entity;
            private TearOffWhereParameter _tearOff;

        }

        public WhereClause Where
        {
            get
            {
                if (_whereClause == null)
                {
                    _whereClause = new WhereClause(this);
                }

                return _whereClause;
            }
        }

        private WhereClause _whereClause = null;
        #endregion

        #region Aggregate Clause
        public class AggregateClause
        {
            public AggregateClause(BusinessEntity entity)
            {
                this._entity = entity;
            }

            public TearOffAggregateParameter TearOff
            {
                get
                {
                    if (_tearOff == null)
                    {
                        _tearOff = new TearOffAggregateParameter(this);
                    }

                    return _tearOff;
                }
            }

            #region AggregateParameter TearOff's
            public class TearOffAggregateParameter
            {
                public TearOffAggregateParameter(AggregateClause clause)
                {
                    this._clause = clause;
                }


                public AggregateParameter CountrySiteID
                {
                    get
                    {
                        AggregateParameter aggregate = new AggregateParameter(ColumnNames.CountrySiteID, Parameters.CountrySiteID);
                        this._clause._entity.Query.AddAggregateParameter(aggregate);
                        return aggregate;
                    }
                }

                public AggregateParameter CountryID
                {
                    get
                    {
                        AggregateParameter aggregate = new AggregateParameter(ColumnNames.CountryID, Parameters.CountryID);
                        this._clause._entity.Query.AddAggregateParameter(aggregate);
                        return aggregate;
                    }
                }

                public AggregateParameter SiteID
                {
                    get
                    {
                        AggregateParameter aggregate = new AggregateParameter(ColumnNames.SiteID, Parameters.SiteID);
                        this._clause._entity.Query.AddAggregateParameter(aggregate);
                        return aggregate;
                    }
                }

                private AggregateClause _clause;
            }
            #endregion

            public AggregateParameter CountrySiteID
            {
                get
                {
                    if (_CountrySiteID_W == null)
                    {
                        _CountrySiteID_W = TearOff.CountrySiteID;
                    }
                    return _CountrySiteID_W;
                }
            }

            public AggregateParameter CountryID
            {
                get
                {
                    if (_CountryID_W == null)
                    {
                        _CountryID_W = TearOff.CountryID;
                    }
                    return _CountryID_W;
                }
            }

            public AggregateParameter SiteID
            {
                get
                {
                    if (_SiteID_W == null)
                    {
                        _SiteID_W = TearOff.SiteID;
                    }
                    return _SiteID_W;
                }
            }

            private AggregateParameter _CountrySiteID_W = null;
            private AggregateParameter _CountryID_W = null;
            private AggregateParameter _SiteID_W = null;

            public void AggregateClauseReset()
            {
                _CountrySiteID_W = null;
                _CountryID_W = null;
                _SiteID_W = null;

                this._entity.Query.FlushAggregateParameters();

            }

            private BusinessEntity _entity;
            private TearOffAggregateParameter _tearOff;

        }

        public AggregateClause Aggregate
        {
            get
            {
                if (_aggregateClause == null)
                {
                    _aggregateClause = new AggregateClause(this);
                }

                return _aggregateClause;
            }
        }

        private AggregateClause _aggregateClause = null;
        #endregion

        protected override IDbCommand GetInsertCommand()
        {

            SqlCommand cmd = new SqlCommand();
            cmd.CommandType = CommandType.StoredProcedure;
            cmd.CommandText = "[" + this.SchemaStoredProcedure + "InsertCountrySite]";

            CreateParameters(cmd);

            SqlParameter p;
            p = cmd.Parameters[Parameters.CountrySiteID.ParameterName];
            p.Direction = ParameterDirection.Output;

            return cmd;
        }

        protected override IDbCommand GetUpdateCommand()
        {

            SqlCommand cmd = new SqlCommand();
            cmd.CommandType = CommandType.StoredProcedure;
            cmd.CommandText = "[" + this.SchemaStoredProcedure + "UpdateCountrySite]";

            CreateParameters(cmd);

            return cmd;
        }

        protected override IDbCommand GetDeleteCommand()
        {

            SqlCommand cmd = new SqlCommand();
            cmd.CommandType = CommandType.StoredProcedure;
            cmd.CommandText = "[" + this.SchemaStoredProcedure + "DeleteCountrySite]";

            SqlParameter p;
            p = cmd.Parameters.Add(Parameters.CountrySiteID);
            p.SourceColumn = ColumnNames.CountrySiteID;
            p.SourceVersion = DataRowVersion.Current;


            return cmd;
        }

        private IDbCommand CreateParameters(SqlCommand cmd)
        {
            SqlParameter p;

            p = cmd.Parameters.Add(Parameters.CountrySiteID);
            p.SourceColumn = ColumnNames.CountrySiteID;
            p.SourceVersion = DataRowVersion.Current;

            p = cmd.Parameters.Add(Parameters.CountryID);
            p.SourceColumn = ColumnNames.CountryID;
            p.SourceVersion = DataRowVersion.Current;

            p = cmd.Parameters.Add(Parameters.SiteID);
            p.SourceColumn = ColumnNames.SiteID;
            p.SourceVersion = DataRowVersion.Current;

            return cmd;
        }
    }
}
