
/*
'===============================================================================
'  Generated From - CSharp_dOOdads_BusinessEntity.vbgen
' 
'  ** IMPORTANT  ** 
'  How to Generate your stored procedures:
' 
'  SQL        = SQL_StoredProcs.vbgen
'  ACCESS     = Access_StoredProcs.vbgen
'  ORACLE     = Oracle_StoredProcs.vbgen
'  FIREBIRD   = FirebirdStoredProcs.vbgen
'  POSTGRESQL = PostgreSQL_StoredProcs.vbgen
'
'  The supporting base class SqlClientEntity is in the Architecture directory in "dOOdads".
'  
'  This object is 'abstract' which means you need to inherit from it to be able
'  to instantiate it.  This is very easilly done. You can override properties and
'  methods in your derived class, this allows you to regenerate this class at any
'  time and not worry about overwriting custom code. 
'
'  NEVER EDIT THIS FILE.
'
'  public class YourObject :  _YourObject
'  {
'
'  }
'
'===============================================================================
*/

// Generated by MyGeneration Version # (1.3.0.3)

using System;
using System.Data;
using System.Data.SqlClient;
using System.Collections;
using System.Collections.Specialized;

using MyGeneration.dOOdads;

namespace VikkiSoft_BLL.DAL
{
	public abstract class _BlogPage : SqlClientEntity
	{
		public _BlogPage()
		{
			this.QuerySource = "BlogPage";
			this.MappingName = "BlogPage";

		}	

		//=================================================================
		//  public Overrides void AddNew()
		//=================================================================
		//
		//=================================================================
		public override void AddNew()
		{
			base.AddNew();
			
		}
		
		
		public override void FlushData()
		{
			this._whereClause = null;
			this._aggregateClause = null;
			base.FlushData();
		}
		
		//=================================================================
		//  	public Function LoadAll() As Boolean
		//=================================================================
		//  Loads all of the records in the database, and sets the currentRow to the first row
		//=================================================================
		public bool LoadAll() 
		{
			ListDictionary parameters = null;
			
			return base.LoadFromSql("[" + this.SchemaStoredProcedure + "LoadAllBlogPage]", parameters);
		}
	
		//=================================================================
		// public Overridable Function LoadByPrimaryKey()  As Boolean
		//=================================================================
		//  Loads a single row of via the primary key
		//=================================================================
		public virtual bool LoadByPrimaryKey(int BlogPageID)
		{
			ListDictionary parameters = new ListDictionary();
			parameters.Add(Parameters.BlogPageID, BlogPageID);

		
			return base.LoadFromSql("[" + this.SchemaStoredProcedure + "LoadBlogPageByPrimaryKey]", parameters);
		}
		
		#region Parameters
		protected class Parameters
		{
			
			public static SqlParameter BlogPageID
			{
				get
				{
					return new SqlParameter("@BlogPageID", SqlDbType.Int, 0);
				}
			}
			
			public static SqlParameter Name
			{
				get
				{
					return new SqlParameter("@Name", SqlDbType.VarChar, 255);
				}
			}
			
			public static SqlParameter Name_en
			{
				get
				{
					return new SqlParameter("@Name_en", SqlDbType.VarChar, 255);
				}
			}
			
			public static SqlParameter PageContent
			{
				get
				{
					return new SqlParameter("@PageContent", SqlDbType.VarChar, 2147483647);
				}
			}

            public static SqlParameter Keywords
            {
                get
                {
                    return new SqlParameter("@Keywords", SqlDbType.VarChar, 250);
                }
            }

            public static SqlParameter Active
            {
                get
                {
                    return new SqlParameter("@Active", SqlDbType.Bit, 0);
                }
            }

            public static SqlParameter Description
            {
                get
                {
                    return new SqlParameter("@Description", SqlDbType.VarChar, 200);
                }
            }

            public static SqlParameter DateUpdate
            {
                get
                {
                    return new SqlParameter("@DateUpdate", SqlDbType.SmallDateTime, 0);
                }
            }

            public static SqlParameter StartTravelDate
            {
                get
                {
                    return new SqlParameter("@StartTravelDate", SqlDbType.SmallDateTime, 0);
                }
            }

            public static SqlParameter EndTravelDate
            {
                get
                {
                    return new SqlParameter("@EndTravelDate", SqlDbType.SmallDateTime, 0);
                }
            }

            public static SqlParameter DatePublish
            {
                get
                {
                    return new SqlParameter("@DatePublish", SqlDbType.SmallDateTime, 0);
                }
            }

            public static SqlParameter IsBlogPage
            {
                get
                {
                    return new SqlParameter("@IsBlogPage", SqlDbType.Bit, 0);
                }
            }

            public static SqlParameter TitleImage
            {
                get
                {
                    return new SqlParameter("@TitleImage", SqlDbType.VarChar, 50);
                }
            }

            public static SqlParameter BlogDescription
            {
                get
                {
                    return new SqlParameter("@BlogDescription", SqlDbType.VarChar, 250);
                }
            }
			
		}
		#endregion		
	
		#region ColumnNames
		public class ColumnNames
		{  
            public const string BlogPageID = "BlogPageID";
            public const string Name = "Name";
            public const string Name_en = "Name_en";
            public const string PageContent = "PageContent";
            public const string Keywords = "Keywords";
            public const string Active = "Active";
            public const string Description = "Description";
            public const string DateUpdate = "DateUpdate";
            public const string StartTravelDate = "StartTravelDate";
            public const string EndTravelDate = "EndTravelDate";
            public const string DatePublish = "DatePublish";
            public const string IsBlogPage = "IsBlogPage";
            public const string TitleImage = "TitleImage";
            public const string BlogDescription = "BlogDescription";

			static public string ToPropertyName(string columnName)
			{
				if(ht == null)
				{
					ht = new Hashtable();
					
					ht[BlogPageID] = _BlogPage.PropertyNames.BlogPageID;
					ht[Name] = _BlogPage.PropertyNames.Name;
					ht[Name_en] = _BlogPage.PropertyNames.Name_en;
					ht[PageContent] = _BlogPage.PropertyNames.PageContent;
                    ht[Keywords] = _BlogPage.PropertyNames.Keywords;
                    ht[Active] = _BlogPage.PropertyNames.Active;
                    ht[Description] = _BlogPage.PropertyNames.Description;
                    ht[DateUpdate] = _BlogPage.PropertyNames.DateUpdate;
                    ht[StartTravelDate] = _BlogPage.PropertyNames.StartTravelDate;
                    ht[EndTravelDate] = _BlogPage.PropertyNames.EndTravelDate;
                    ht[DatePublish] = _BlogPage.PropertyNames.DatePublish;
                    ht[IsBlogPage] = _BlogPage.PropertyNames.IsBlogPage;
                    ht[TitleImage] = _BlogPage.PropertyNames.TitleImage;
                    ht[BlogDescription] = _BlogPage.PropertyNames.BlogDescription;
				}
				return (string)ht[columnName];
			}

			static private Hashtable ht = null;			 
		}
		#endregion
		
		#region PropertyNames
		public class PropertyNames
		{  
            public const string BlogPageID = "BlogPageID";
            public const string Name = "Name";
            public const string Name_en = "Name_en";
            public const string PageContent = "PageContent";
            public const string Keywords = "Keywords";
            public const string Active = "Active";
            public const string Description = "Description";
            public const string DateUpdate = "DateUpdate";
            public const string StartTravelDate = "StartTravelDate";
            public const string EndTravelDate = "EndTravelDate";
            public const string DatePublish = "DatePublish";
            public const string IsBlogPage = "IsBlogPage";
            public const string TitleImage = "TitleImage";
            public const string BlogDescription = "BlogDescription";

			static public string ToColumnName(string propertyName)
			{
				if(ht == null)
				{
					ht = new Hashtable();
					
					ht[BlogPageID] = _BlogPage.ColumnNames.BlogPageID;
					ht[Name] = _BlogPage.ColumnNames.Name;
					ht[Name_en] = _BlogPage.ColumnNames.Name_en;
					ht[PageContent] = _BlogPage.ColumnNames.PageContent;
                    ht[Keywords] = _BlogPage.ColumnNames.Keywords;
                    ht[Active] = _BlogPage.ColumnNames.Active;
                    ht[Description] = _BlogPage.ColumnNames.Description;
                    ht[DateUpdate] = _BlogPage.ColumnNames.DateUpdate;
                    ht[StartTravelDate] = _BlogPage.ColumnNames.StartTravelDate;
                    ht[EndTravelDate] = _BlogPage.ColumnNames.EndTravelDate;
                    ht[DatePublish] = _BlogPage.ColumnNames.DatePublish;
                    ht[IsBlogPage] = _BlogPage.ColumnNames.IsBlogPage;
                    ht[TitleImage] = _BlogPage.ColumnNames.TitleImage;
                    ht[BlogDescription] = _BlogPage.ColumnNames.BlogDescription;

				}
				return (string)ht[propertyName];
			}

			static private Hashtable ht = null;			 
		}			 
		#endregion	

		#region StringPropertyNames
		public class StringPropertyNames
		{  
            public const string BlogPageID = "s_BlogPageID";
            public const string Name = "s_Name";
            public const string Name_en = "s_Name_en";
            public const string PageContent = "s_PageContent";
            public const string Keywords = "s_Keywords";
            public const string Active = "s_Active";
            public const string Description = "s_Description";
            public const string DateUpdate = "s_DateUpdate";
            public const string StartTravelDate = "s_StartTravelDate";
            public const string EndTravelDate = "s_EndTravelDate";
            public const string DatePublish = "s_DatePublish";
            public const string IsBlogPage = "s_IsBlogPage";
            public const string TitleImage = "s_TitleImage";
            public const string BlogDescription = "s_BlogDescription";

		}
		#endregion		
		
		#region Properties
	
		public virtual int BlogPageID
	    {
			get
	        {
				return base.Getint(ColumnNames.BlogPageID);
			}
			set
	        {
				base.Setint(ColumnNames.BlogPageID, value);
			}
		}

		public virtual string Name
	    {
			get
	        {
				return base.Getstring(ColumnNames.Name);
			}
			set
	        {
				base.Setstring(ColumnNames.Name, value);
			}
		}

		public virtual string Name_en
	    {
			get
	        {
				return base.Getstring(ColumnNames.Name_en);
			}
			set
	        {
				base.Setstring(ColumnNames.Name_en, value);
			}
		}

		public virtual string PageContent
	    {
			get
	        {
				return base.Getstring(ColumnNames.PageContent);
			}
			set
	        {
				base.Setstring(ColumnNames.PageContent, value);
			}
		}

        public virtual string Keywords
        {
            get
            {
                return base.Getstring(ColumnNames.Keywords);
            }
            set
            {
                base.Setstring(ColumnNames.Keywords, value);
            }
        }

        public virtual bool Active
        {
            get
            {
                return base.Getbool(ColumnNames.Active);
            }
            set
            {
                base.Setbool(ColumnNames.Active, value);
            }
        }

        public virtual string Description
        {
            get
            {
                return base.Getstring(ColumnNames.Description);
            }
            set
            {
                base.Setstring(ColumnNames.Description, value);
            }
        }

        public virtual DateTime DateUpdate
        {
            get
            {
                return base.GetDateTime(ColumnNames.DateUpdate);
            }
            set
            {
                base.SetDateTime(ColumnNames.DateUpdate, value);
            }
        }

        public virtual DateTime StartTravelDate
        {
            get
            {
                return base.GetDateTime(ColumnNames.StartTravelDate);
            }
            set
            {
                base.SetDateTime(ColumnNames.StartTravelDate, value);
            }
        }

        public virtual DateTime EndTravelDate
        {
            get
            {
                return base.GetDateTime(ColumnNames.EndTravelDate);
            }
            set
            {
                base.SetDateTime(ColumnNames.EndTravelDate, value);
            }
        }

        public virtual DateTime DatePublish
        {
            get
            {
                return base.GetDateTime(ColumnNames.DatePublish);
            }
            set
            {
                base.SetDateTime(ColumnNames.DatePublish, value);
            }
        }

        public virtual bool IsBlogPage
        {
            get
            {
                return base.Getbool(ColumnNames.IsBlogPage);
            }
            set
            {
                base.Setbool(ColumnNames.IsBlogPage, value);
            }
        }

        public virtual string TitleImage
        {
            get
            {
                return base.Getstring(ColumnNames.TitleImage);
            }
            set
            {
                base.Setstring(ColumnNames.TitleImage, value);
            }
        }

        public virtual string BlogDescription
        {
            get
            {
                return base.Getstring(ColumnNames.BlogDescription);
            }
            set
            {
                base.Setstring(ColumnNames.BlogDescription, value);
            }
        }

		#endregion
		
		#region String Properties
	
		public virtual string s_BlogPageID
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.BlogPageID) ? string.Empty : base.GetintAsString(ColumnNames.BlogPageID);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.BlogPageID);
				else
					this.BlogPageID = base.SetintAsString(ColumnNames.BlogPageID, value);
			}
		}

		public virtual string s_Name
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.Name) ? string.Empty : base.GetstringAsString(ColumnNames.Name);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.Name);
				else
					this.Name = base.SetstringAsString(ColumnNames.Name, value);
			}
		}

		public virtual string s_Name_en
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.Name_en) ? string.Empty : base.GetstringAsString(ColumnNames.Name_en);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.Name_en);
				else
					this.Name_en = base.SetstringAsString(ColumnNames.Name_en, value);
			}
		}

		public virtual string s_PageContent
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.PageContent) ? string.Empty : base.GetstringAsString(ColumnNames.PageContent);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.PageContent);
				else
					this.PageContent = base.SetstringAsString(ColumnNames.PageContent, value);
			}
		}

        public virtual string s_Keywords
        {
            get
            {
                return this.IsColumnNull(ColumnNames.Keywords) ? string.Empty : base.GetstringAsString(ColumnNames.Keywords);
            }
            set
            {
                if (string.Empty == value)
                    this.SetColumnNull(ColumnNames.Keywords);
                else
                    this.Keywords = base.SetstringAsString(ColumnNames.Keywords, value);
            }
        }

        public virtual string s_Active
        {
            get
            {
                return this.IsColumnNull(ColumnNames.Active) ? string.Empty : base.GetboolAsString(ColumnNames.Active);
            }
            set
            {
                if (string.Empty == value)
                    this.SetColumnNull(ColumnNames.Active);
                else
                    this.Active = base.SetboolAsString(ColumnNames.Active, value);
            }
        }

        public virtual string s_Description
        {
            get
            {
                return this.IsColumnNull(ColumnNames.Description) ? string.Empty : base.GetstringAsString(ColumnNames.Description);
            }
            set
            {
                if (string.Empty == value)
                    this.SetColumnNull(ColumnNames.Description);
                else
                    this.Description = base.SetstringAsString(ColumnNames.Description, value);
            }
        }

        public virtual string s_DateUpdate
        {
            get
            {
                return this.IsColumnNull(ColumnNames.DateUpdate) ? string.Empty : base.GetDateTimeAsString(ColumnNames.DateUpdate);
            }
            set
            {
                if (string.Empty == value)
                    this.SetColumnNull(ColumnNames.DateUpdate);
                else
                    this.DateUpdate = base.SetDateTimeAsString(ColumnNames.DateUpdate, value);
            }
        }

        public virtual string s_StartTravelDate
        {
            get
            {
                return this.IsColumnNull(ColumnNames.StartTravelDate) ? string.Empty : base.GetDateTimeAsString(ColumnNames.StartTravelDate);
            }
            set
            {
                if (string.Empty == value)
                    this.SetColumnNull(ColumnNames.StartTravelDate);
                else
                    this.StartTravelDate = base.SetDateTimeAsString(ColumnNames.StartTravelDate, value);
            }
        }

        public virtual string s_EndTravelDate
        {
            get
            {
                return this.IsColumnNull(ColumnNames.EndTravelDate) ? string.Empty : base.GetDateTimeAsString(ColumnNames.EndTravelDate);
            }
            set
            {
                if (string.Empty == value)
                    this.SetColumnNull(ColumnNames.EndTravelDate);
                else
                    this.EndTravelDate = base.SetDateTimeAsString(ColumnNames.EndTravelDate, value);
            }
        }

        public virtual string s_DatePublish
        {
            get
            {
                return this.IsColumnNull(ColumnNames.DatePublish) ? string.Empty : base.GetDateTimeAsString(ColumnNames.DatePublish);
            }
            set
            {
                if (string.Empty == value)
                    this.SetColumnNull(ColumnNames.DatePublish);
                else
                    this.DatePublish = base.SetDateTimeAsString(ColumnNames.DatePublish, value);
            }
        }

        public virtual string s_IsBlogPage
        {
            get
            {
                return this.IsColumnNull(ColumnNames.IsBlogPage) ? string.Empty : base.GetboolAsString(ColumnNames.IsBlogPage);
            }
            set
            {
                if (string.Empty == value)
                    this.SetColumnNull(ColumnNames.IsBlogPage);
                else
                    this.IsBlogPage = base.SetboolAsString(ColumnNames.IsBlogPage, value);
            }
        }

        public virtual string s_TitleImage
        {
            get
            {
                return this.IsColumnNull(ColumnNames.TitleImage) ? string.Empty : base.GetstringAsString(ColumnNames.TitleImage);
            }
            set
            {
                if (string.Empty == value)
                    this.SetColumnNull(ColumnNames.TitleImage);
                else
                    this.TitleImage = base.SetstringAsString(ColumnNames.TitleImage, value);
            }
        }

        public virtual string s_BlogDescription
        {
            get
            {
                return this.IsColumnNull(ColumnNames.BlogDescription) ? string.Empty : base.GetstringAsString(ColumnNames.BlogDescription);
            }
            set
            {
                if (string.Empty == value)
                    this.SetColumnNull(ColumnNames.BlogDescription);
                else
                    this.BlogDescription = base.SetstringAsString(ColumnNames.BlogDescription, value);
            }
        }

		#endregion		
	
		#region Where Clause
		public class WhereClause
		{
			public WhereClause(BusinessEntity entity)
			{
				this._entity = entity;
			}
			
			public TearOffWhereParameter TearOff
			{
				get
				{
					if(_tearOff == null)
					{
						_tearOff = new TearOffWhereParameter(this);
					}

					return _tearOff;
				}
			}

			#region WhereParameter TearOff's
			public class TearOffWhereParameter
			{
				public TearOffWhereParameter(WhereClause clause)
				{
					this._clause = clause;
				}
				
				
				public WhereParameter BlogPageID
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.BlogPageID, Parameters.BlogPageID);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter Name
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.Name, Parameters.Name);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter Name_en
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.Name_en, Parameters.Name_en);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter PageContent
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.PageContent, Parameters.PageContent);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

                public WhereParameter Keywords
                {
                    get
                    {
                        WhereParameter where = new WhereParameter(ColumnNames.Keywords, Parameters.Keywords);
                        this._clause._entity.Query.AddWhereParameter(where);
                        return where;
                    }
                }

                public WhereParameter Active
                {
                    get
                    {
                        WhereParameter where = new WhereParameter(ColumnNames.Active, Parameters.Active);
                        this._clause._entity.Query.AddWhereParameter(where);
                        return where;
                    }
                }

                public WhereParameter Description
                {
                    get
                    {
                        WhereParameter where = new WhereParameter(ColumnNames.Description, Parameters.Description);
                        this._clause._entity.Query.AddWhereParameter(where);
                        return where;
                    }
                }

                public WhereParameter DateUpdate
                {
                    get
                    {
                        WhereParameter where = new WhereParameter(ColumnNames.DateUpdate, Parameters.DateUpdate);
                        this._clause._entity.Query.AddWhereParameter(where);
                        return where;
                    }
                }

                public WhereParameter StartTravelDate
                {
                    get
                    {
                        WhereParameter where = new WhereParameter(ColumnNames.StartTravelDate, Parameters.StartTravelDate);
                        this._clause._entity.Query.AddWhereParameter(where);
                        return where;
                    }
                }

                public WhereParameter EndTravelDate
                {
                    get
                    {
                        WhereParameter where = new WhereParameter(ColumnNames.EndTravelDate, Parameters.EndTravelDate);
                        this._clause._entity.Query.AddWhereParameter(where);
                        return where;
                    }
                }

                public WhereParameter DatePublish
                {
                    get
                    {
                        WhereParameter where = new WhereParameter(ColumnNames.DatePublish, Parameters.DatePublish);
                        this._clause._entity.Query.AddWhereParameter(where);
                        return where;
                    }
                }

                public WhereParameter IsBlogPage
                {
                    get
                    {
                        WhereParameter where = new WhereParameter(ColumnNames.IsBlogPage, Parameters.IsBlogPage);
                        this._clause._entity.Query.AddWhereParameter(where);
                        return where;
                    }
                }

                public WhereParameter TitleImage
                {
                    get
                    {
                        WhereParameter where = new WhereParameter(ColumnNames.TitleImage, Parameters.TitleImage);
                        this._clause._entity.Query.AddWhereParameter(where);
                        return where;
                    }
                }

                public WhereParameter BlogDescription
                {
                    get
                    {
                        WhereParameter where = new WhereParameter(ColumnNames.BlogDescription, Parameters.BlogDescription);
                        this._clause._entity.Query.AddWhereParameter(where);
                        return where;
                    }
                }

				private WhereClause _clause;
			}
			#endregion
		
			public WhereParameter BlogPageID
		    {
				get
		        {
					if(_BlogPageID_W == null)
	        	    {
						_BlogPageID_W = TearOff.BlogPageID;
					}
					return _BlogPageID_W;
				}
			}

			public WhereParameter Name
		    {
				get
		        {
					if(_Name_W == null)
	        	    {
						_Name_W = TearOff.Name;
					}
					return _Name_W;
				}
			}

			public WhereParameter Name_en
		    {
				get
		        {
					if(_Name_en_W == null)
	        	    {
						_Name_en_W = TearOff.Name_en;
					}
					return _Name_en_W;
				}
			}

			public WhereParameter PageContent
		    {
				get
		        {
					if(_PageContent_W == null)
	        	    {
						_PageContent_W = TearOff.PageContent;
					}
					return _PageContent_W;
				}
			}

            public WhereParameter Keywords
            {
                get
                {
                    if (_Keywords_W == null)
                    {
                        _Keywords_W = TearOff.Keywords;
                    }
                    return _Keywords_W;
                }
            }

            public WhereParameter Active
            {
                get
                {
                    if (_Active_W == null)
                    {
                        _Active_W = TearOff.Active;
                    }
                    return _Active_W;
                }
            }

            public WhereParameter Description
            {
                get
                {
                    if (_Description_W == null)
                    {
                        _Description_W = TearOff.Description;
                    }
                    return _Description_W;
                }
            }

            public WhereParameter DateUpdate
            {
                get
                {
                    if (_DateUpdate_W == null)
                    {
                        _DateUpdate_W = TearOff.DateUpdate;
                    }
                    return _DateUpdate_W;
                }
            }

            public WhereParameter StartTravelDate
            {
                get
                {
                    if (_StartTravelDate_W == null)
                    {
                        _StartTravelDate_W = TearOff.StartTravelDate;
                    }
                    return _StartTravelDate_W;
                }
            }

            public WhereParameter EndTravelDate
            {
                get
                {
                    if (_EndTravelDate_W == null)
                    {
                        _EndTravelDate_W = TearOff.EndTravelDate;
                    }
                    return _EndTravelDate_W;
                }
            }

            public WhereParameter DatePublish
            {
                get
                {
                    if (_DatePublish_W == null)
                    {
                        _DatePublish_W = TearOff.DatePublish;
                    }
                    return _DatePublish_W;
                }
            }

            public WhereParameter IsBlogPage
            {
                get
                {
                    if (_IsBlogPage_W == null)
                    {
                        _IsBlogPage_W = TearOff.IsBlogPage;
                    }
                    return _IsBlogPage_W;
                }
            }

            public WhereParameter TitleImage
            {
                get
                {
                    if (_TitleImage_W == null)
                    {
                        _TitleImage_W = TearOff.TitleImage;
                    }
                    return _TitleImage_W;
                }
            }

            public WhereParameter BlogDescription
            {
                get
                {
                    if (_BlogDescription_W == null)
                    {
                        _BlogDescription_W = TearOff.BlogDescription;
                    }
                    return _BlogDescription_W;
                }
            }

			private WhereParameter _BlogPageID_W = null;
			private WhereParameter _Name_W = null;
			private WhereParameter _Name_en_W = null;
			private WhereParameter _PageContent_W = null;
            private WhereParameter _Keywords_W = null;
            private WhereParameter _Active_W = null;
            private WhereParameter _Description_W = null;
            private WhereParameter _DateUpdate_W = null;
            private WhereParameter _StartTravelDate_W = null;
            private WhereParameter _EndTravelDate_W = null;
            private WhereParameter _DatePublish_W = null;
            private WhereParameter _IsBlogPage_W = null;
            private WhereParameter _TitleImage_W = null;
            private WhereParameter _BlogDescription_W = null;

			public void WhereClauseReset()
			{
				_BlogPageID_W = null;
				_Name_W = null;
				_Name_en_W = null;
				_PageContent_W = null;
                _Keywords_W = null;
                _Active_W = null;
                _Description_W = null;
                _DateUpdate_W = null;
                _StartTravelDate_W = null;
                _EndTravelDate_W = null;
                _DatePublish_W = null;
                _IsBlogPage_W = null;
                _TitleImage_W = null;
                _BlogDescription_W = null;

				this._entity.Query.FlushWhereParameters();

			}
	
			private BusinessEntity _entity;
			private TearOffWhereParameter _tearOff;
			
		}
	
		public WhereClause Where
		{
			get
			{
				if(_whereClause == null)
				{
					_whereClause = new WhereClause(this);
				}
		
				return _whereClause;
			}
		}
		
		private WhereClause _whereClause = null;	
		#endregion
	
		#region Aggregate Clause
		public class AggregateClause
		{
			public AggregateClause(BusinessEntity entity)
			{
				this._entity = entity;
			}
			
			public TearOffAggregateParameter TearOff
			{
				get
				{
					if(_tearOff == null)
					{
						_tearOff = new TearOffAggregateParameter(this);
					}

					return _tearOff;
				}
			}

			#region AggregateParameter TearOff's
			public class TearOffAggregateParameter
			{
				public TearOffAggregateParameter(AggregateClause clause)
				{
					this._clause = clause;
				}
				
				
				public AggregateParameter BlogPageID
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.BlogPageID, Parameters.BlogPageID);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter Name
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.Name, Parameters.Name);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter Name_en
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.Name_en, Parameters.Name_en);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter PageContent
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.PageContent, Parameters.PageContent);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

                public AggregateParameter Keywords
                {
                    get
                    {
                        AggregateParameter aggregate = new AggregateParameter(ColumnNames.Keywords, Parameters.Keywords);
                        this._clause._entity.Query.AddAggregateParameter(aggregate);
                        return aggregate;
                    }
                }

                public AggregateParameter Active
                {
                    get
                    {
                        AggregateParameter aggregate = new AggregateParameter(ColumnNames.Active, Parameters.Active);
                        this._clause._entity.Query.AddAggregateParameter(aggregate);
                        return aggregate;
                    }
                }

                public AggregateParameter Description
                {
                    get
                    {
                        AggregateParameter aggregate = new AggregateParameter(ColumnNames.Description, Parameters.Description);
                        this._clause._entity.Query.AddAggregateParameter(aggregate);
                        return aggregate;
                    }
                }

                public AggregateParameter DateUpdate
                {
                    get
                    {
                        AggregateParameter aggregate = new AggregateParameter(ColumnNames.DateUpdate, Parameters.DateUpdate);
                        this._clause._entity.Query.AddAggregateParameter(aggregate);
                        return aggregate;
                    }
                }

                public AggregateParameter StartTravelDate
                {
                    get
                    {
                        AggregateParameter aggregate = new AggregateParameter(ColumnNames.StartTravelDate, Parameters.StartTravelDate);
                        this._clause._entity.Query.AddAggregateParameter(aggregate);
                        return aggregate;
                    }
                }

                public AggregateParameter EndTravelDate
                {
                    get
                    {
                        AggregateParameter aggregate = new AggregateParameter(ColumnNames.EndTravelDate, Parameters.EndTravelDate);
                        this._clause._entity.Query.AddAggregateParameter(aggregate);
                        return aggregate;
                    }
                }

                public AggregateParameter DatePublish
                {
                    get
                    {
                        AggregateParameter aggregate = new AggregateParameter(ColumnNames.DatePublish, Parameters.DatePublish);
                        this._clause._entity.Query.AddAggregateParameter(aggregate);
                        return aggregate;
                    }
                }

                public AggregateParameter IsBlogPage
                {
                    get
                    {
                        AggregateParameter aggregate = new AggregateParameter(ColumnNames.IsBlogPage, Parameters.IsBlogPage);
                        this._clause._entity.Query.AddAggregateParameter(aggregate);
                        return aggregate;
                    }
                }

                public AggregateParameter TitleImage
                {
                    get
                    {
                        AggregateParameter aggregate = new AggregateParameter(ColumnNames.TitleImage, Parameters.TitleImage);
                        this._clause._entity.Query.AddAggregateParameter(aggregate);
                        return aggregate;
                    }
                }

                public AggregateParameter BlogDescription
                {
                    get
                    {
                        AggregateParameter aggregate = new AggregateParameter(ColumnNames.BlogDescription, Parameters.BlogDescription);
                        this._clause._entity.Query.AddAggregateParameter(aggregate);
                        return aggregate;
                    }
                }

				private AggregateClause _clause;
			}
			#endregion
		
			public AggregateParameter BlogPageID
		    {
				get
		        {
					if(_BlogPageID_W == null)
	        	    {
						_BlogPageID_W = TearOff.BlogPageID;
					}
					return _BlogPageID_W;
				}
			}

			public AggregateParameter Name
		    {
				get
		        {
					if(_Name_W == null)
	        	    {
						_Name_W = TearOff.Name;
					}
					return _Name_W;
				}
			}

			public AggregateParameter Name_en
		    {
				get
		        {
					if(_Name_en_W == null)
	        	    {
						_Name_en_W = TearOff.Name_en;
					}
					return _Name_en_W;
				}
			}

			public AggregateParameter PageContent
		    {
				get
		        {
					if(_PageContent_W == null)
	        	    {
						_PageContent_W = TearOff.PageContent;
					}
					return _PageContent_W;
				}
			}

            public AggregateParameter Keywords
            {
                get
                {
                    if (_Keywords_W == null)
                    {
                        _Keywords_W = TearOff.Keywords;
                    }
                    return _Keywords_W;
                }
            }

            public AggregateParameter Active
            {
                get
                {
                    if (_Active_W == null)
                    {
                        _Active_W = TearOff.Active;
                    }
                    return _Active_W;
                }
            }

            public AggregateParameter Description
            {
                get
                {
                    if (_Description_W == null)
                    {
                        _Description_W = TearOff.Description;
                    }
                    return _Description_W;
                }
            }

            public AggregateParameter DateUpdate
            {
                get
                {
                    if (_DateUpdate_W == null)
                    {
                        _DateUpdate_W = TearOff.DateUpdate;
                    }
                    return _DateUpdate_W;
                }
            }

            public AggregateParameter StartTravelDate
            {
                get
                {
                    if (_StartTravelDate_W == null)
                    {
                        _StartTravelDate_W = TearOff.StartTravelDate;
                    }
                    return _StartTravelDate_W;
                }
            }

            public AggregateParameter EndTravelDate
            {
                get
                {
                    if (_EndTravelDate_W == null)
                    {
                        _EndTravelDate_W = TearOff.EndTravelDate;
                    }
                    return _EndTravelDate_W;
                }
            }

            public AggregateParameter DatePublish
            {
                get
                {
                    if (_DatePublish_W == null)
                    {
                        _DatePublish_W = TearOff.DatePublish;
                    }
                    return _DatePublish_W;
                }
            }

            public AggregateParameter IsBlogPage
            {
                get
                {
                    if (_IsBlogPage_W == null)
                    {
                        _IsBlogPage_W = TearOff.IsBlogPage;
                    }
                    return _IsBlogPage_W;
                }
            }

            public AggregateParameter TitleImage
            {
                get
                {
                    if (_TitleImage_W == null)
                    {
                        _TitleImage_W = TearOff.TitleImage;
                    }
                    return _TitleImage_W;
                }
            }

            public AggregateParameter BlogDescription
            {
                get
                {
                    if (_BlogDescription_W == null)
                    {
                        _BlogDescription_W = TearOff.BlogDescription;
                    }
                    return _BlogDescription_W;
                }
            }

			private AggregateParameter _BlogPageID_W = null;
			private AggregateParameter _Name_W = null;
			private AggregateParameter _Name_en_W = null;
			private AggregateParameter _PageContent_W = null;
            private AggregateParameter _Keywords_W = null;
            private AggregateParameter _Active_W = null;
            private AggregateParameter _Description_W = null;
            private AggregateParameter _DateUpdate_W = null;
            private AggregateParameter _StartTravelDate_W = null;
            private AggregateParameter _EndTravelDate_W = null;
            private AggregateParameter _DatePublish_W = null;
            private AggregateParameter _IsBlogPage_W = null;
            private AggregateParameter _TitleImage_W = null;
            private AggregateParameter _BlogDescription_W = null;

			public void AggregateClauseReset()
			{
				_BlogPageID_W = null;
				_Name_W = null;
				_Name_en_W = null;
				_PageContent_W = null;
                _Keywords_W = null;
                _Active_W = null;
                _Description_W = null;
                _DateUpdate_W = null;
                _StartTravelDate_W = null;
                _EndTravelDate_W = null;
                _DatePublish_W = null;
                _IsBlogPage_W = null;
                _TitleImage_W = null;
                _BlogDescription_W = null;

				this._entity.Query.FlushAggregateParameters();

			}
	
			private BusinessEntity _entity;
			private TearOffAggregateParameter _tearOff;
			
		}
	
		public AggregateClause Aggregate
		{
			get
			{
				if(_aggregateClause == null)
				{
					_aggregateClause = new AggregateClause(this);
				}
		
				return _aggregateClause;
			}
		}
		
		private AggregateClause _aggregateClause = null;	
		#endregion
	
		protected override IDbCommand GetInsertCommand() 
		{
		
			SqlCommand cmd = new SqlCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			cmd.CommandText = "[" + this.SchemaStoredProcedure + "InsertBlogPage]";
	
			CreateParameters(cmd);
			
			SqlParameter p;
			p = cmd.Parameters[Parameters.BlogPageID.ParameterName];
			p.Direction = ParameterDirection.Output;
    
			return cmd;
		}
	
		protected override IDbCommand GetUpdateCommand()
		{
		
			SqlCommand cmd = new SqlCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			cmd.CommandText = "[" + this.SchemaStoredProcedure + "UpdateBlogPage]";
	
			CreateParameters(cmd);
			      
			return cmd;
		}
	
		protected override IDbCommand GetDeleteCommand()
		{
		
			SqlCommand cmd = new SqlCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			cmd.CommandText = "[" + this.SchemaStoredProcedure + "DeleteBlogPage]";
	
			SqlParameter p;
			p = cmd.Parameters.Add(Parameters.BlogPageID);
			p.SourceColumn = ColumnNames.BlogPageID;
			p.SourceVersion = DataRowVersion.Current;

  
			return cmd;
		}
		
		private IDbCommand CreateParameters(SqlCommand cmd)
		{
			SqlParameter p;
		
			p = cmd.Parameters.Add(Parameters.BlogPageID);
			p.SourceColumn = ColumnNames.BlogPageID;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.Name);
			p.SourceColumn = ColumnNames.Name;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.Name_en);
			p.SourceColumn = ColumnNames.Name_en;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.PageContent);
			p.SourceColumn = ColumnNames.PageContent;
			p.SourceVersion = DataRowVersion.Current;

            p = cmd.Parameters.Add(Parameters.Keywords);
            p.SourceColumn = ColumnNames.Keywords;
            p.SourceVersion = DataRowVersion.Current;

            p = cmd.Parameters.Add(Parameters.Active);
            p.SourceColumn = ColumnNames.Active;
            p.SourceVersion = DataRowVersion.Current;

            p = cmd.Parameters.Add(Parameters.Description);
            p.SourceColumn = ColumnNames.Description;
            p.SourceVersion = DataRowVersion.Current;

            p = cmd.Parameters.Add(Parameters.DateUpdate);
            p.SourceColumn = ColumnNames.DateUpdate;
            p.SourceVersion = DataRowVersion.Current;

            p = cmd.Parameters.Add(Parameters.StartTravelDate);
            p.SourceColumn = ColumnNames.StartTravelDate;
            p.SourceVersion = DataRowVersion.Current;

            p = cmd.Parameters.Add(Parameters.EndTravelDate);
            p.SourceColumn = ColumnNames.EndTravelDate;
            p.SourceVersion = DataRowVersion.Current;

            p = cmd.Parameters.Add(Parameters.DatePublish);
            p.SourceColumn = ColumnNames.DatePublish;
            p.SourceVersion = DataRowVersion.Current;

            p = cmd.Parameters.Add(Parameters.IsBlogPage);
            p.SourceColumn = ColumnNames.IsBlogPage;
            p.SourceVersion = DataRowVersion.Current;

            p = cmd.Parameters.Add(Parameters.TitleImage);
            p.SourceColumn = ColumnNames.TitleImage;
            p.SourceVersion = DataRowVersion.Current;

            p = cmd.Parameters.Add(Parameters.BlogDescription);
            p.SourceColumn = ColumnNames.BlogDescription;
            p.SourceVersion = DataRowVersion.Current;

			return cmd;
		}
	}
}
